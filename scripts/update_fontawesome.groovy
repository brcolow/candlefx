#!/usr/bin/env groovy
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
import java.time.LocalDate
import java.time.format.DateTimeFormatter

if (args.length != 1) {
    System.err.println("Error: FontAwesome 5 directory not specified")
    System.err.println(
"""Usage: ${new File(getClass().protectionDomain.codeSource.location.path).getName} directory

Checks if the given directory is a newer version of FontAwesome 5 than
what is currently used by CandleFX. If it is, the FontAwesome java
class is updated with the new icons and the font file is copied to the
repository.""")
    System.exit(1)
}

def fontAwesomeDir = args[0]
def sep = File.separator

if (!new File("${fontAwesomeDir}${sep}web-fonts-with-css").exists()) {
    System.err.println("Error: Given directory is not a FontAwesome 5 root directory: " + fontAwesomeDir)
    System.err.println("Expecting given directory to contain \"web-fonts-with-css\" directory")
    System.exit(1)
}

def scriptsDir = new File((String) getClass().protectionDomain.codeSource.location.path).parent
def currentFontFile = new FileNameByRegexFinder().getFileNames(
        "${scriptsDir}${sep}..${sep}core${sep}src${sep}main${sep}resources${sep}font",
        /fontawesome-webfont-(\d.\d+.\d+)\.ttf/)
def currentVersionMatch = currentFontFile.getAt(0) =~ /\d.\d.\d/
def currentVersion = currentVersionMatch.getAt(0)

def readmeLines = new File("${fontAwesomeDir}${sep}README.md").text.readLines()
def readmeMatches = readmeLines[0] =~ /# Font Awesome 5.\d+.\d+/

if (!readmeMatches) {
    System.err.println("Error: First line of README.md did not match \"# Font Awesome 5.x.y\"")
    System.exit(1)
}

def version = (readmeLines =~ /5.\d+.\d+/).getAt(0)

if (currentVersion == version) {
    System.out.println("FontAwesome.java is already at the latest version (${version})")
    System.exit(0)
} else {
    if (!isMoreRecent(version, currentVersion)) {
        System.err.println("Error: Given directory points to older FontAwesome version than current version in FontAwesome.java")
        System.err.println("Current version: ${currentVersion}")
        System.err.println("Given version: ${version}")
        System.exit(1)
    } else {
        System.out.println("Updating FontAwesome.java from ${currentVersion} to ${version}...")
    }
}

lessVariables = new File("${fontAwesomeDir}${sep}web-fonts-with-css${sep}less${sep}_variables.less").getText('UTF-8')
seenVersion = false
emptyLineCount = 0
def iconMap = [:]
lessVariables.eachLine {
    if (it =~ /@fa-version:/) {
        seenVersion = true
    }

    if (seenVersion) {
        if (it.isEmpty()) {
            emptyLineCount++
            return
        }
    }

    if (emptyLineCount == 1) {
        // we are on an icon definition which has the form:
        // @fa-var-{icon_name}: "\{icon_unicode_char}";
        iconParts = it.split(" ")
        iconName = iconParts.getAt(0).substring(8, iconParts.getAt(0).indexOf(":")).toUpperCase()
        iconName = iconName.replaceAll('-', '_')
        iconUnicodeChar = (iconParts.getAt(1) =~ /"([^"]*)"/).getAt(0).getAt(1)
        iconUnicodeJava = "\\u" + iconUnicodeChar.substring(1)
        iconMap.put(iconName, iconUnicodeJava)
    }
}

def iconsJava = new StringBuilder()

iconMap.eachWithIndex{ key, value, index ->
    if (index > 0) {
        iconsJava.append("        ")
    }
    if (!Character.isAlphabetic(key.toString().codePointAt(0))) {
        iconsJava.append("_") // java identifiers must start with alphabetic character (i.e. not a number)
    }
    iconsJava.append("${key}(\'${value}\')")
    iconsJava.append(index != iconMap.size() - 1 ? ',' : ';')
    iconsJava.append("\n")
}

String javaSource = """package com.brcolow.candlefx;

import java.util.HashMap;
import java.util.Map;

/**
 * FontAwesome v${version}
 * <p>
 * This file was auto-generated by scripts/update_fontawesome.groovy on
 * ${DateTimeFormatter.ISO_LOCAL_DATE.format(LocalDate.now())}.
 *
 * @see <a href=\"http://fortawesome.github.io/Font-Awesome/\">FontAwesome</a>
 */
public class FontAwesome extends GlyphFont
{
    public enum Glyph implements NamedGlyph
    {
        ${iconsJava.toString()}

        private final Character character;

        Glyph(Character character)
        {
            this.character = character;
        }

        public Character getChar()
        {
            return character;
        }

        public String toUnicode()
        {
            return String.format(\"\\\\u%04x\", (int) character);
        }
    }

    private static final String fontFamily = \"FontAwesome\";

    @Override
    public Map<String, NamedGlyph> getGlyphMap()
    {
        Map<String, NamedGlyph> result = new HashMap<>();

        for (Glyph glyph : Glyph.values())
        {
            result.put(glyph.toString(), glyph);
        }

        return result;
    }

    @Override
    public String getFontFamily()
    {
        return fontFamily;
    }
}
"""

def javaFile = new File("${scriptsDir}${sep}FontAwesome.java")
javaFile.withWriter('UTF-8') { writer ->
    writer.write(javaSource)
}

def fontFile = new File("${fontAwesomeDir}${sep}web-fonts-with-css${sep}webfonts${sep}fa-regular-400.ttf")

// Copy local FontAwesome.java and fontawesome-webfont-{version}.ttf to existing files
Files.copy(Paths.get(javaFile.toURI()), Paths.get("${scriptsDir}${sep}..${sep}core${sep}src${sep}main${sep}java${sep}com${sep}brcolow${sep}candlefx${sep}FontAwesome.java"),
        StandardCopyOption.REPLACE_EXISTING)

newFontFile = "${scriptsDir}${sep}..${sep}core${sep}src${sep}main${sep}resources${sep}font${sep}fontawesome-webfont-${version}.ttf"
oldFontFile = "${scriptsDir}${sep}..${sep}core${sep}src${sep}main${sep}resources${sep}font${sep}fontawesome-webfont-${currentVersion}.ttf"
Files.copy(Paths.get(fontFile.toURI()), Paths.get(newFontFile),
        StandardCopyOption.REPLACE_EXISTING)

System.out.println("Deleting old font file: core/src/main/resources/font/fontawesome-webfont-${currentVersion}.ttf")

Files.delete(Paths.get(oldFontFile))

System.out.println('Replacing old ttf file version with new one in GlyphFonts.java')
glyphFontsJavaFilePath = "${scriptsDir}${sep}..${sep}core${sep}src${sep}main${sep}java${sep}com${sep}brcolow${sep}candlefx${sep}GlyphFonts.java"

glyphFontsJavaFile = new File(glyphFontsJavaFilePath)
processFileInplace(glyphFontsJavaFile) { text ->
    text.replaceAll(/fontawesome-webfont-${currentVersion}.ttf/, "fontawesome-webfont-${version}.ttf")
}

System.out.println('Cleaning up...')
Files.delete(Paths.get(javaFile.toURI()))
Files.delete(Paths.get(fontFile.toURI()))

System.out.println('Done!')

@SuppressWarnings("GroovyAssignabilityCheck")
static def processFileInplace(File file, Closure processText) {
    def text = file.text
    file.write(processText(text))
}

boolean isMoreRecent(String a, String b) {
    [a, b]*.tokenize('.')*.collect { it as int }.with { u, v ->
        Integer result = [u, v].transpose().findResult { x, y -> x <=> y ?: null } ?: u.size() <=> v.size()
        return (result == 1)
    }
}
